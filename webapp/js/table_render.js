// table_render.js

// –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–ª–∞
function getTableDims() {
  const wrapper = document.getElementById('poker-table-wrapper');
  const W = wrapper.offsetWidth;
  const H = wrapper.offsetHeight;
  // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: —à–∏—Ä–∏–Ω–∞ <= 90% wrapper, –≤—ã—Å–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏—é (–æ–≤–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª)
  let w = Math.min(W * 0.9, 960);
  let h = w * 0.60;
  const cx = W / 2, cy = H / 2;
  return { w, h, cx, cy, rx: w * 0.44, ry: h * 0.41 };
}

// –í—Å–µ–≥–¥–∞ 6 –º–µ—Å—Ç!
const N_SEATS = 6;

// angles –¥–ª—è 6 –º–µ—Å—Ç (–ø–æ –∫—Ä—É–≥—É, "—Å–∏–¥—è—â–∏–π –≤–Ω–∏–∑—É ‚Äî seat 0")
function getSeatAngles(N) {
  if (N === 6) return [90, 150, 210, 270, 330, 30];
  let out = [];
  for (let i = 0; i < N; ++i) out.push(90 + (360 / N) * i);
  return out;
}

// –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –º–µ—Å—Ç
export function renderTable(state, userId) {
  const pokerTableEl = document.getElementById('poker-table');
  const borderEl     = document.getElementById('poker-table-border');
  const wrapperEl    = document.getElementById('poker-table-wrapper');
  const seatsEl      = document.getElementById('seats');
  const communityEl  = document.getElementById('community-cards');

  // –û—á–∏—Å—Ç–∫–∞
  seatsEl.innerHTML = '';
  communityEl.innerHTML = '';

  // –û–±—â–∏–µ –∫–∞—Ä—Ç—ã
  (state.community || []).forEach((card, idx) => {
    const cEl = document.createElement('div');
    cEl.className = 'card';
    const rank = card.slice(0, -1);
    const suit = card.slice(-1);
    cEl.innerHTML = `<span class="rank">${rank}</span><span class="suit">${suit}</span>`;
    if (suit === '‚ô•' || suit === '‚ô¶') cEl.classList.add('red');
    communityEl.appendChild(cEl);
    setTimeout(() => cEl.classList.add('visible'), 120 + idx * 90);
  });

  // –ì–∞–±–∞—Ä–∏—Ç—ã –∏ —Ü–µ–Ω—Ç—Ä
  function getTableDims() {
    const wrapper = wrapperEl;
    const W = wrapper.offsetWidth;
    const H = wrapper.offsetHeight;
    let w = Math.min(W * 0.9, 960);
    let h = w * 0.60;
    const cx = W / 2, cy = H / 2;
    return { w, h, cx, cy, rx: w * 0.44, ry: h * 0.41 };
  }
  const { cx, cy, rx, ry } = getTableDims();

  // –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤, –≥–¥–µ p.seat ‚Äî seat id (0..5)
  const players = state.players || [];
  // –§–æ—Ä–º–∏—Ä—É–µ–º map seatId => player
  const seatsMap = Array(N_SEATS).fill(null);
  players.forEach(p => { if (typeof p.seat !== "undefined") seatsMap[p.seat] = p; });

  const angles = getSeatAngles(N_SEATS);

  // –†–∏—Å—É–µ–º –í–°–ï 6 –º–µ—Å—Ç
  for (let seatId = 0; seatId < N_SEATS; ++seatId) {
    const rad = angles[seatId] * Math.PI / 180;
    const left = cx + rx * Math.cos(rad);
    const top  = cy + ry * Math.sin(rad);

    const seatDiv = document.createElement('div');
    seatDiv.className = 'seat';
    seatDiv.style.position = 'absolute';
    seatDiv.style.left = left + 'px';
    seatDiv.style.top = top + 'px';
    seatDiv.style.transform = 'translate(-50%, -50%)';

    const player = seatsMap[seatId];
    if (player) {
      // –ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ ‚Äî —Ä–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞
      if (String(player.user_id) === String(userId)) seatDiv.classList.add('my-seat');
      if (String(state.current_player) === String(player.user_id)) seatDiv.classList.add('active');

      // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
      const cardsEl = document.createElement('div');
      cardsEl.className = 'cards';
      (state.hole_cards?.[player.user_id] || []).forEach(c => {
        const cd = document.createElement('div');
        cd.className = 'card';
        if (String(player.user_id) === String(userId)) {
          const rk = c.slice(0, -1);
          const st = c.slice(-1);
          cd.innerHTML = `<span class="rank">${rk}</span><span class="suit">${st}</span>`;
          if (st === '‚ô•' || st === '‚ô¶') cd.classList.add('red');
        } else {
          cd.innerHTML = `<span class="suit">üÇ†</span>`;
        }
        cardsEl.appendChild(cd);
      });
      seatDiv.appendChild(cardsEl);

      // –ò–º—è –∏ —Å—Ç–µ–∫
      const block = document.createElement('div');
      block.className = 'seat-block';
      const infoEl = document.createElement('div');
      infoEl.className = 'player-info';
      infoEl.textContent = player.username;
      block.appendChild(infoEl);

      const stackEl = document.createElement('div');
      stackEl.className = 'player-stack';
      stackEl.textContent = state.stacks?.[player.user_id] || 0;
      block.appendChild(stackEl);

      seatDiv.appendChild(block);
    } else {
      // –ú–µ—Å—Ç–æ –ø—É—Å—Ç–æ–µ ‚Äî —Ä–∏—Å—É–µ–º SIT
      seatDiv.classList.add('empty');
      const sitBtn = document.createElement('button');
      sitBtn.className = 'sit-btn';
      sitBtn.textContent = 'SIT';
      sitBtn.onclick = () => joinSeat(seatId); // –†–µ–∞–ª–∏–∑—É–π joinSeat(seatId)
      seatDiv.appendChild(sitBtn);
    }

    seatsEl.appendChild(seatDiv);
  }
}

// –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ (–ù–ï –¥–æ–±–∞–≤–ª—è–µ–º actionsEl –≤ DOM!)
export function positionActionsEl(state, userId) {
  const wrapper = document.getElementById('poker-table-wrapper');
  const actionsEl = document.getElementById('actions');
  const { cx, cy, rx, ry } = getTableDims();
  const players = state.players || [];
  const userIndex = players.findIndex(p => String(p.user_id) === String(userId));
  const N = players.length;
  if (N === 0) return;
  const angles = getSeatAngles(N);
  const seatOrder = [];
  for (let i = 0; i < N; ++i) seatOrder.push(angles[(i - userIndex + N) % N]);
  const rad = seatOrder[0] * Math.PI / 180;
  actionsEl.style.position = 'absolute';
  actionsEl.style.left     = (cx + rx * Math.cos(rad)) + 'px';
  actionsEl.style.top      = (cy + ry * Math.sin(rad) + 54) + 'px';
  actionsEl.style.transform = 'translate(-50%, 0)';
  actionsEl.style.zIndex   = 999;
  actionsEl.style.display  = 'flex';
}

// –î–ª—è hotfix: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–π layout –∏ render –ø—Ä–∏ resize/mutation
window.addEventListener('resize', () => {
  if (window.currentTableState)
    renderTable(window.currentTableState, window.currentUserId);
  if (window.currentTableState && window.currentUserId)
    positionActionsEl(window.currentTableState, window.currentUserId);
});

// –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ‚Äî —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç (–±–∞–≥ Telegram)
setTimeout(() => {
  if (window.currentTableState)
    renderTable(window.currentTableState, window.currentUserId);
  if (window.currentTableState && window.currentUserId)
    positionActionsEl(window.currentTableState, window.currentUserId);
}, 200);
