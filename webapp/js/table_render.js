// table_render.js

// –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–ª–∞
function getTableDims() {
  const wrapper = document.getElementById('poker-table-wrapper');
  const W = wrapper.offsetWidth;
  const H = wrapper.offsetHeight;
  // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: —à–∏—Ä–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ <= 90% wrapper, –≤—ã—Å–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏—é (–æ–≤–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª)
  let w = Math.min(W * 0.9, 960);  // –º–∞–∫—Å —à–∏—Ä–∏–Ω–∞ 960px
  let h = w * 0.60;                // –æ–≤–∞–ª—å–Ω–æ—Å—Ç—å (–ø–æ–¥–±–∏—Ä–∞–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  const cx = W / 2, cy = H / 2;
  return { w, h, cx, cy, rx: w * 0.44, ry: h * 0.41 }; // rx/ry - "–æ—Ä–±–∏—Ç—ã" –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≥–ª–æ–≤ –¥–ª—è –º–µ—Å—Ç
function getSeatAngles(N) {
  if (N === 2) return [90, 270];
  if (N === 3) return [90, 210, 330];
  if (N === 4) return [90, 180, 270, 0];
  if (N === 5) return [90, 162, 234, 306, 18];
  if (N === 6) return [90, 150, 210, 270, 330, 30];
  // –ü–æ –∫—Ä—É–≥—É –¥–ª—è –ª—é–±–æ–≥–æ N
  let out = [];
  for (let i = 0; i < N; ++i) out.push(90 + (360 / N) * i);
  return out;
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
export function renderTable(state, userId) {
  const pokerTableEl = document.getElementById('poker-table');
  const borderEl     = document.getElementById('poker-table-border');
  const wrapperEl    = document.getElementById('poker-table-wrapper');
  const seatsEl      = document.getElementById('seats');
  const actionsEl    = document.getElementById('actions');
  const communityEl  = document.getElementById('community-cards');

  // –û—á–∏—Å—Ç–∫–∞
  seatsEl.innerHTML = '';
  communityEl.innerHTML = '';

  // 1. –û–±—â–∏–µ –∫–∞—Ä—Ç—ã
  (state.community || []).forEach((card, idx) => {
    const cEl = document.createElement('div');
    cEl.className = 'card';
    const rank = card.slice(0, -1);
    const suit = card.slice(-1);
    cEl.innerHTML = `<span class="rank">${rank}</span><span class="suit">${suit}</span>`;
    if (suit === '‚ô•' || suit === '‚ô¶') cEl.classList.add('red');
    communityEl.appendChild(cEl);
    setTimeout(() => cEl.classList.add('visible'), 120 + idx * 90);
  });

  // 2. –ì–∞–±–∞—Ä–∏—Ç—ã –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { w, h, cx, cy, rx, ry } = getTableDims();
  [pokerTableEl, borderEl, seatsEl].forEach(el => {
    if (!el) return;
    el.style.position  = 'absolute';
    el.style.width     = w + 'px';
    el.style.height    = h + 'px';
    el.style.left      = '50%';
    el.style.top       = '50%';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.margin    = '0';
    el.style.padding   = '0';
  });
  // border —á—É—Ç—å –±–æ–ª—å—à–µ —Å—Ç–æ–ª–∞
  if (borderEl) {
    borderEl.style.width  = (w * 1.07) + 'px';
    borderEl.style.height = (h * 1.11) + 'px';
  }

  // 3. –°–∏–¥–µ–Ω–∏—è (–∏–≥—Ä–æ–∫–∏)
  const players = state.players || [];
  const holeMap = state.hole_cards || {};
  const userIndex = players.findIndex(p => String(p.user_id) === String(userId));
  const N = players.length;
  const angles = getSeatAngles(N);
  const seatOrder = [];
  for (let i = 0; i < N; ++i)
    seatOrder.push(angles[(i - userIndex + N) % N]);

  players.forEach((p, i) => {
    const seat = document.createElement('div');
    seat.className = 'seat';
    // –ü–æ–∑–∏—Ü–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ wrapper!
    const rad = seatOrder[i] * Math.PI / 180;
    seat.style.position  = 'absolute';
    seat.style.left      = (cx + rx * Math.cos(rad)) + 'px';
    seat.style.top       = (cy + ry * Math.sin(rad)) + 'px';
    seat.style.transform = 'translate(-50%, -50%)';

    if (String(p.user_id) === String(userId)) seat.classList.add('my-seat');
    if (String(state.current_player) === String(p.user_id)) seat.classList.add('active');

    // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
    const cardsEl = document.createElement('div');
    cardsEl.className = 'cards';
    (holeMap[p.user_id] || []).forEach(c => {
      const cd = document.createElement('div');
      cd.className = 'card';
      if (String(p.user_id) === String(userId)) {
        const rk = c.slice(0, -1);
        const st = c.slice(-1);
        cd.innerHTML = `<span class="rank">${rk}</span><span class="suit">${st}</span>`;
        if (st === '‚ô•' || st === '‚ô¶') cd.classList.add('red');
      } else {
        cd.innerHTML = `<span class="suit">üÇ†</span>`;
      }
      cardsEl.appendChild(cd);
    });
    seat.appendChild(cardsEl);

    // –ò–º—è –∏ —Å—Ç–µ–∫
    const block = document.createElement('div');
    block.className = 'seat-block';
    const infoEl = document.createElement('div');
    infoEl.className = 'player-info';
    infoEl.textContent = p.username;
    block.appendChild(infoEl);

    const stackEl = document.createElement('div');
    stackEl.className = 'player-stack';
    stackEl.textContent = state.stacks?.[p.user_id] || 0;
    block.appendChild(stackEl);

    seat.appendChild(block);
    seatsEl.appendChild(seat);
  });

  // 4. –§–∏—à–∫–∞ –¥–∏–ª–µ—Ä–∞
  let dealerChipEl = document.getElementById('dealer-chip-main');
  if (!dealerChipEl) {
    dealerChipEl = document.createElement('div');
    dealerChipEl.className = 'dealer-chip';
    dealerChipEl.id = 'dealer-chip-main';
    dealerChipEl.textContent = 'D';
    seatsEl.appendChild(dealerChipEl);
  }
  dealerChipEl.style.display = 'none';
  players.forEach((p, i) => {
    if (typeof state.dealer_index !== 'undefined' && Number(state.dealer_index) === i) {
      const rad = seatOrder[i] * Math.PI / 180;
      dealerChipEl.style.position = 'absolute';
      dealerChipEl.style.left  = (cx + rx * Math.cos(rad) + 34) + 'px';
      dealerChipEl.style.top   = (cy + ry * Math.sin(rad) - 36) + 'px';
      dealerChipEl.style.display = 'flex';
    }
  });

  // 5. –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ‚Äî –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–º
  if (actionsEl && players.length > 0) {
    const rad = seatOrder[0] * Math.PI / 180;
    actionsEl.style.position = 'absolute';
    actionsEl.style.zIndex = 999;
    actionsEl.style.display = 'flex';
    const rad = seatOrder[0] * Math.PI / 180;
    actionsEl.style.left = (cx + rx * Math.cos(rad)) + 'px';
    actionsEl.style.top  = (cy + ry * Math.sin(rad) + 54) + 'px';
    actionsEl.style.transform = 'translate(-50%, 0)';
  }
}

// –î–ª—è hotfix: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–π layout –∏ render –ø—Ä–∏ resize/mutation
window.addEventListener('resize', () => {
  if (window.currentTableState)
    renderTable(window.currentTableState, window.currentUserId);
});

// –•–∞–∫: –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å –±–∞–≥–Ω—É—Ç—ã–º —Ü–µ–Ω—Ç—Ä–æ–º (—Ç–µ–ª–µ–≥—Ä–∞–º/–≤–µ–±–≤—å—é)
// –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç layout –ø–æ —Ç–∞–π–º–µ—Ä—É, –µ—Å–ª–∏ –Ω–µ —Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–æ
setTimeout(() => {
  if (window.currentTableState)
    renderTable(window.currentTableState, window.currentUserId);
}, 200);


