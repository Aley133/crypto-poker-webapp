const N_SEATS = 6;

// –£–≥–ª—ã –¥–ª—è 6 –º–µ—Å—Ç, 0 ‚Äî –≤—Å–µ–≥–¥–∞ —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É, –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
function getSeatAngles(N) {
  return [90, 150, 210, 270, 330, 30];
}

// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ —Ü–µ–Ω—Ç—Ä —Å—Ç–æ–ª–∞
function getTableDims() {
  const table = document.getElementById('poker-table');
  const W = table.offsetWidth;
  const H = table.offsetHeight;
  const cx = W / 2, cy = H / 2;
  return {
    cx, cy,
    rx: W * 0.48, // 0.48 —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∏ –±—ã–ª–∏ –ø—Ä—è–º —É –±–æ—Ä—Ç–∞, –Ω–æ –≤–Ω–µ –æ–≤–∞–ª–∞
    ry: H * 0.48
  };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ —Å—Ç–æ–ª–∞ –∏ –º–µ—Å—Ç
function renderTable(state, userId) {
  const seatsEl = document.getElementById('seats');
  seatsEl.innerHTML = '';

  const { cx, cy, rx, ry } = getTableDims();
  const angles = getSeatAngles(N_SEATS);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∫—Ç–æ —Å–∏–¥–∏—Ç –≥–¥–µ (seatMap[seatId] = {...})
  const seatMap = Array(N_SEATS).fill(null);
  if (state.players) {
    state.players.forEach(p => {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º p.seat ‚Äî seatId (0..5), p.user_id, p.username
      if (typeof p.seat === 'number') seatMap[p.seat] = p;
    });
  }

  // –î–∏–ª–µ—Ä
  let dealerSeat = null;
  if (typeof state.dealer_index === 'number') {
    const dealerPlayer = state.players?.[state.dealer_index];
    if (dealerPlayer && typeof dealerPlayer.seat === "number") {
      dealerSeat = dealerPlayer.seat;
    }
  }

  for (let seatId = 0; seatId < N_SEATS; ++seatId) {
    const rad = angles[seatId] * Math.PI / 180;
    const left = cx + rx * Math.cos(rad);
    const top  = cy + ry * Math.sin(rad);

    const seatDiv = document.createElement('div');
    seatDiv.className = 'seat';
    seatDiv.style.left = left + 'px';
    seatDiv.style.top = top + 'px';

    // –î–∏–ª–µ—Ä —á–∏–ø
    if (dealerSeat === seatId) {
      const dealerChip = document.createElement('div');
      dealerChip.className = 'dealer-chip';
      dealerChip.textContent = 'D';
      seatDiv.appendChild(dealerChip);
    }

    const player = seatMap[seatId];
    if (player) {
      if (String(player.user_id) === String(userId)) seatDiv.classList.add('my-seat');
      if (String(state.current_player) === String(player.user_id)) seatDiv.classList.add('active');

      // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
      const cardsEl = document.createElement('div');
      cardsEl.className = 'cards';
      const playerCards = (state.hole_cards?.[player.user_id] || []);
      playerCards.forEach(c => {
        const cd = document.createElement('div');
        cd.className = 'card';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ showdown
        if (
          String(player.user_id) === String(userId) ||
          (state.phase === "result" && state.revealed_hands?.[player.user_id])
        ) {
          const rk = c.slice(0, -1);
          const st = c.slice(-1);
          cd.innerHTML = `<span class="rank">${rk}</span><span class="suit">${st}</span>`;
          if (st === '‚ô•' || st === '‚ô¶') cd.classList.add('red');
        } else {
          cd.innerHTML = `<span class="suit">üÇ†</span>`;
        }
        cardsEl.appendChild(cd);
      });
      seatDiv.appendChild(cardsEl);

      // –ò–º—è –∏ —Å—Ç–µ–∫
      const block = document.createElement('div');
      block.className = 'seat-block';
      const infoEl = document.createElement('div');
      infoEl.className = 'player-info';
      infoEl.textContent = player.username;
      block.appendChild(infoEl);

      const stackEl = document.createElement('div');
      stackEl.className = 'player-stack';
      stackEl.textContent = state.stacks?.[player.user_id] ?? 0;
      block.appendChild(stackEl);

      seatDiv.appendChild(block);
    } else {
      // –ú–µ—Å—Ç–æ –ø—É—Å—Ç–æ–µ ‚Äî –∫–Ω–æ–ø–∫–∞ SIT
      seatDiv.classList.add('empty');
      const sitBtn = document.createElement('button');
      sitBtn.className = 'sit-btn';
      sitBtn.textContent = 'SIT';
      sitBtn.onclick = () => joinSeat(seatId);
      seatDiv.appendChild(sitBtn);
    }

    seatsEl.appendChild(seatDiv);
  }
}

// –°–∞–∂–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ (—Ä–µ–∞–ª–∏–∑—É–π reloadGameState —Å–∞–º)
function joinSeat(seatId) {
  fetch(`/api/join-seat?table_id=${tableId}&user_id=${userId}&seat=${seatId}`, { method: 'POST' })
    .then(() => reloadGameState());
}

// –ê–≤—Ç–æ-–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –∏ –∑–∞–ø—É—Å–∫–µ
window.addEventListener('resize', () => {
  if (window.currentTableState)
    renderTable(window.currentTableState, window.currentUserId);
});
window.addEventListener('DOMContentLoaded', () => {
  if (window.currentTableState)
    renderTable(window.currentTableState, window.currentUserId);
});
