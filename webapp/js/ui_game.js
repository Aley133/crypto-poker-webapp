import { getGameState } from './api.js';
import { createWebSocket } from './ws.js';

// URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const params   = new URLSearchParams(window.location.search);
const tableId  = params.get('table_id');
const userId   = params.get('user_id');
const username = params.get('username') || userId;

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const tableIdEl    = document.getElementById('table-id');
const statusEl     = document.getElementById('status');
const holeCardsEl  = document.getElementById('player-self');
const oppCardsEl   = document.getElementById('player-opp');
const communityEl  = document.getElementById('community-cards');
const potEl        = document.getElementById('pot');
const currentBetEl = document.getElementById('current-bet');
const actionsEl    = document.getElementById('actions');
const leaveBtn     = document.getElementById('leave-btn');

// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞
tableIdEl.textContent = tableId;

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å—Ç–æ–ª —Å —Ñ–∞–∑–∞–º–∏
 */
function renderGameState(state) {
  // –°—Ç–∞—Ç—É—Å
  if (!state.started) {
    statusEl.textContent = `–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤‚Ä¶ (${state.players_count || 0}/2)`;
    actionsEl.style.display = 'none';
    communityEl.innerHTML = '';
    holeCardsEl.innerHTML = '';
    oppCardsEl.innerHTML = '';
    return;
  }
  statusEl.textContent = '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å';
  actionsEl.style.display = 'block';

  // –ù–∞–π–¥—ë–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
  const players = state.players || [];
  const opp = players.find(p => p.user_id != userId);

  // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä–º–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
  const hole = state.hole_cards?.[userId] || [];
  holeCardsEl.innerHTML = `
    <div>–í—ã: ${username}</div>
    ${hole.map(c => `<span class="card">${c}</span>`).join('')}
  `;

  // –û–ø–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç
  oppCardsEl.innerHTML = `
    <div>${opp?.username || '–û–ø–ø–æ–Ω–µ–Ω—Ç'}</div>
    ${opp ? 'üÇ† üÇ†' : ''}
  `;

  // –û–±—â–∏–µ –∫–∞—Ä—Ç—ã (—Ñ–ª–æ–ø, —Ç–µ—Ä–Ω, —Ä–∏–≤–µ—Ä)
  communityEl.innerHTML = (state.community_cards || []).
    map(c => `<span class="card">${c}</span>`).
    join('');

  // –ü–æ—Ç –∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
  potEl.textContent        = `–ü–æ—Ç: ${state.pot || 0}`;
  currentBetEl.textContent = `–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${state.current_bet || 0}`;

  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  actionsEl.innerHTML = '';
  ['fold','check','call','bet','raise'].forEach(act => {
    const btn = document.createElement('button');
    btn.textContent = act;
    btn.addEventListener('click', () => {
      let amount = 0;
      if (act === 'bet' || act === 'raise') {
        amount = parseInt(prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')) || 0;
      }
      ws.send(JSON.stringify({ user_id: userId, action: act, amount }));
    });
    actionsEl.appendChild(btn);
  });
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º WS –∏ HTTP-–ø–æ–ª–ª–∏–Ω–≥
let ws;
(async () => {
  try {
    const state = await getGameState(tableId);
    renderGameState(state);
  } catch (e) {
    console.error('Init error', e);
  }
  ws = createWebSocket(tableId, userId, username, e => renderGameState(JSON.parse(e.data)));
})();

// –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
leaveBtn.addEventListener('click', async () => {
  await fetch(`/api/leave?table_id=${tableId}&user_id=${userId}`, { method: 'POST' });
  window.location.href = '/index.html';
});
