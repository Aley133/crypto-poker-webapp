// webapp/app.js
document.addEventListener('DOMContentLoaded', () => {
  const params   = new URLSearchParams(window.location.search);
  const userId   = params.get('user_id');
  const username = decodeURIComponent(params.get('username') || '‚Äî');
  const tableId  = params.get('table_id');

  const originWs = () => {
    // ws://... –∏–ª–∏ wss://...
    return (location.protocol === 'https:' ? 'wss' : 'ws')
      + '://' + location.host;
  };

  // –û–±—â–∞—è –≤—Å—Ç–∞–≤–∫–∞ —à–∞–ø–∫–∏
  const avatarEl  = document.getElementById('avatar');
  const nameEl    = document.getElementById('username');
  const balEl     = document.getElementById('current-balance');
  if (nameEl) nameEl.textContent = username;
  // –∞–≤–∞—Ç–∞—Ä–∫–∞ ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
  if (avatarEl) avatarEl.style.backgroundImage = '';

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
  async function api(path, extra = {}) {
    const q = new URLSearchParams({ user_id: userId, ...extra });
    const res = await fetch(path + '?' + q.toString());
    if (!res.ok) throw new Error(res.status);
    return res.json();
  }

  // –û–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å –Ω–∞ —à–∞–ø–∫–µ
  api('/api/balance')
    .then(d => balEl.textContent = d.balance.toFixed(2) + ' USDT')
    .catch(() => { /* silent */ });

  // –ö–Ω–æ–ø–∫–∏ –¥–µ–ø–æ–∑–∏—Ç/–≤—ã–≤–æ–¥/–∏—Å—Ç–æ—Ä–∏—è (–æ–±—â–∏–µ)
  const infoEl = document.getElementById('info');
  const depBtn = document.getElementById('deposit');
  const wdrBtn = document.getElementById('withdraw');
  const histBtn= document.getElementById('history');

  if (depBtn) depBtn.onclick = async () => {
    try {
      const d = await api('/api/deposit');
      infoEl.textContent = `üì• –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${d.address}`;
    } catch {
      infoEl.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ';
    }
  };
  if (wdrBtn) wdrBtn.onclick = async () => {
    try {
      const d = await api('/api/withdraw');
      infoEl.textContent = `üì§ ${d.instructions}`;
    } catch {
      infoEl.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ';
    }
  };
  if (histBtn) histBtn.onclick = async () => {
    try {
      const d = await api('/api/history');
      infoEl.textContent = d.history.length
        ? d.history.join('\n')
        : 'üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞';
    } catch {
      infoEl.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–±–æ–≤ (–ª–æ–±–±–∏)
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', () => {
      document.querySelectorAll('.tab')
        .forEach(t => t.classList.toggle('active', t === tab));
      const name = tab.dataset.tab;
      if (name === 'cash') loadLobby();
      else if (name === 'tournaments') loadTournaments();
      else infoEl.textContent = '–°–∫–æ—Ä–æ‚Ä¶';
    });
  });

  // –£—Ä–æ–≤–µ–Ω—å –∫–µ—à-—Å—Ç–æ–ª–æ–≤
  const levelSelect = document.getElementById('level-select');
  if (levelSelect) {
    levelSelect.onchange = () => {
      if (document.querySelector('.tab.active').dataset.tab === 'cash') {
        loadLobby();
      }
    };
  }

  // --------------------- –õ–æ–±–±–∏ ---------------------
  async function loadLobby() {
    infoEl.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ª–æ–≤‚Ä¶';
    try {
      const lvl = levelSelect ? levelSelect.value : 'Low';
      const tabs = await api('/api/tables', { level: lvl });
      infoEl.innerHTML = '';
      tabs.forEach(t => {
        const d = document.createElement('div');
        d.className = 'table';
        d.innerHTML = `
          <strong>–°—Ç–æ–ª ${t.id}</strong><br>
          SB/BB: ${t.small_blind}/${t.big_blind}<br>
          –ë–∞–π-–∏–Ω: ${t.buy_in} | –ò–≥—Ä–æ–∫–∏: ${t.players}<br>
          <button data-id="${t.id}">–ò–≥—Ä–∞—Ç—å</button>
        `;
        infoEl.appendChild(d);
        d.querySelector('button').onclick = () => joinAndOpen(t.id);
      });
    } catch (e) {
      console.error(e);
      infoEl.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–æ–ª–æ–≤';
    }
  }

  function joinAndOpen(tid) {
    api('/api/join', { table_id: tid })
      .then(res => {
        if (!res.success) {
          infoEl.textContent = res.message;
          return;
        }
        // –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∏–≥—Ä—É
        const url = `${location.origin}/game.html`
          + `?user_id=${userId}`
          + `&username=${encodeURIComponent(username)}`
          + `&table_id=${tid}`;
        if (window.Telegram && Telegram.WebApp) {
          Telegram.WebApp.openLink(url);
        } else {
          location.href = url;
        }
      })
      .catch(() => infoEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è');
  }

  // ------------------ –¢—É—Ä–Ω–∏—Ä—ã ---------------------
  async function loadTournaments() {
    infoEl.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤‚Ä¶';
    try {
      const list = await api('/api/tournaments');
      infoEl.innerHTML = '';
      list.forEach(tr => {
        const d = document.createElement('div');
        d.className = 'table';
        d.innerHTML = `
          <strong>${tr.name}</strong><br>
          –ë–∞–π-–∏–Ω: ${tr.buy_in} | –ò–≥—Ä–æ–∫–∏: ${tr.players}/${tr.max_players}<br>
          –°—Ç–∞—Ç—É—Å: ${tr.status}<br>
          <button data-id="${tr.id}">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</button>
        `;
        infoEl.appendChild(d);
        d.querySelector('button').onclick = async () => {
          try {
            await api('/api/join_tournament', { tournament_id: tr.id });
            infoEl.textContent = '‚úÖ –í—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ!';
          } catch (err) {
            infoEl.textContent = err.message || '–û—à–∏–±–∫–∞';
          }
        };
      });
    } catch (e) {
      console.error(e);
      infoEl.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤';
    }
  }

  // ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –õ–æ–±–±–∏ -----------------
  if (!tableId) {
    // –µ—Å–ª–∏ –Ω–µ –≤ –∏–≥—Ä–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–±–±–∏
    // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelector('.tab[data-tab="cash"]').click();
  }

  // ------------------ Game.html -------------------
  if (tableId) {
    // –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–∞–±—ã –∏ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤ –∏–≥—Ä–µ –Ω–µ –ø—É—Ç–∞—Ç—å—Å—è
    document.querySelector('.tabs').style.display = 'none';
    document.querySelector('.actions').style.display = 'none';

    // —Å–æ–∑–¥–∞—ë–º WebSocket
    const ws = new WebSocket(`${originWs()}/ws/game/${tableId}`);

    ws.onopen = () => {
      // —Å—Ä–∞–∑—É –∑–∞–ø—Ä–æ—Å–∏–º —Å–≤–æ—ë –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      api('/api/game_state', { table_id: tableId })
        .then(renderState)
        .catch(()=>{/*silent*/});
    };
    ws.onmessage = evt => {
      const state = JSON.parse(evt.data);
      renderState(state);
    };

    // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
    infoEl.innerHTML = `
      <button id="back">‚Üê –ù–∞–∑–∞–¥</button>
      <div id="community-cards">–ö–æ–º—å—é–Ω–∏—Ç–∏: ‚Äî</div>
      <div id="your-cards">–í–∞—à–∏ –∫–∞—Ä—Ç—ã: ‚Äî</div>
      <div id="pot">–ë–∞–Ω–∫: 0</div>
      <div id="players-area">–ò–≥—Ä–æ–∫–∏: ‚Äî</div>
      <div id="actions">
        <button data-action="check">Check</button>
        <button data-action="fold">Fold</button>
        <input type="number" id="bet-amount" placeholder="–°—É–º–º–∞" min="0"/>
        <button data-action="bet">Bet</button>
      </div>
    `;
    // –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏
    document.getElementById('back').onclick = () => {
      if (window.Telegram && Telegram.WebApp) Telegram.WebApp.close();
      else location.href = location.origin + '/?user_id=' + userId + '&username=' + encodeURIComponent(username);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    infoEl.querySelectorAll('#actions button').forEach(btn => {
      btn.onclick = () => {
        const act = btn.dataset.action;
        const amt = act === 'bet'
          ? Number(document.getElementById('bet-amount').value) || 0
          : 0;
        ws.send(JSON.stringify({ user_id: Number(userId), action: act, amount: amt }));
      };
    });

    // –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    function renderState(state) {
      document.getElementById('community-cards').textContent =
        '–ö–æ–º—å—é–Ω–∏—Ç–∏: ' + (state.community.join(' ') || '‚Äî');
      const hole = state.hole_cards[userId] || [];
      document.getElementById('your-cards').textContent =
        '–í–∞—à–∏ –∫–∞—Ä—Ç—ã: ' + (hole.join(' ') || '‚Äî');
      document.getElementById('pot').textContent = '–ë–∞–Ω–∫: ' + state.pot;
      // –∏–≥—Ä–æ–∫–∏ –∏ —Å—Ç–µ–∫–∏
      const pa = Object.entries(state.stacks)
        .map(([uid,stk]) =>
          `#${uid}: ${stk}` + (Number(uid) === state.current_player ? ' ‚Üê —Ö–æ–¥' : '')
        ).join('\n');
      document.getElementById('players-area').textContent = '–ò–≥—Ä–æ–∫–∏:\n' + pa;
    }
  }
});
