import asyncio
import logging
import os
import json
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")  # URL –≤–∞—à–µ–≥–æ WebApp, –±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect("poker.db")
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            wallet_address TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
def get_or_create_wallet(user_id: int) -> str:
    conn = sqlite3.connect("poker.db")
    cur = conn.cursor()
    cur.execute("SELECT wallet_address FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if row and row[0]:
        address = row[0]
    else:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –≤—ã–∑–æ–≤ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        address = f"test_wallet_{user_id}"
        cur.execute(
            "INSERT OR REPLACE INTO users (user_id, wallet_address) VALUES (?, ?)" ,
            (user_id, address)
        )
        conn.commit()
    conn.close()
    return address

# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä WebApp
async def handle_web_app_data(message: types.Message):
    payload = message.web_app_data.data
    try:
        data = json.loads(payload)
    except json.JSONDecodeError:
        return

    action = data.get("action")
    user_id = message.from_user.id

    if action == "get_balance":
        # –ó–∞–≥–ª—É—à–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        bal = 0.00
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal:.2f} USDT")

    elif action == "deposit":
        address = get_or_create_wallet(user_id)
        await message.answer(f"üì• –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ –∞–¥—Ä–µ—Å:\n{address}")

    elif action == "withdraw":
        await message.answer(
            "üì§ –î–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
            "<—Å—É–º–º–∞> <–∞–¥—Ä–µ—Å_–ø–æ–ª—É—á–∞—Ç–µ–ª—è>, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10 0xABCDEF..."
        )

    elif action == "history":
        # –ó–∞–≥–ª—É—à–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        await message.answer("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")

    else:
        await message.answer("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
async def main():
    logging.basicConfig(level=logging.INFO)
    init_db()

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    # /start: –∫–Ω–æ–ø–∫–∞ WebApp + user_id –≤ URL
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        url = f"{WEBAPP_URL}?user_id={message.from_user.id}"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ò–≥—Ä–∞—Ç—å ‚ô†", web_app=WebAppInfo(url=url))]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Poker!\n" +
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ò–≥—Ä–∞—Ç—å ‚ô†¬ª —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É.",
            reply_markup=keyboard
        )

    # /help –∏ /balance (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã)
    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        await message.answer(
            "üìã –ö–æ–º–∞–Ω–¥—ã:\n" +
            "/start ‚Äî –∑–∞–ø—É—Å–∫\n" +
            "/help ‚Äî –ø–æ–º–æ—â—å\n" +
            "/balance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
        )

    @dp.message(Command("balance"))
    async def cmd_balance(message: types.Message):
        await message.answer("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 0.00 USDT")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebAppData
    dp.message.register(handle_web_app_data, lambda msg: msg.web_app_data is not None)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
