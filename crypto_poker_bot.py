import asyncio
import logging
import os
import json
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://Aley133.github.io/crypto-poker-webapp/

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
def init_db():
    conn = sqlite3.connect("poker.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            wallet_address TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# /start ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ReplyKeyboard —Å WebApp-–∫–Ω–æ–ø–∫–æ–π
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ö–Ω–æ–ø–∫–∞ WebApp —á–µ—Ä–µ–∑ ReplyKeyboard
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–≥—Ä–∞—Ç—å ‚ô†", web_app=WebAppInfo(url=WEBAPP_URL))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Poker Bot!\n" \
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ò–≥—Ä–∞—Ç—å ‚ô†¬ª —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É.",
        reply_markup=keyboard
    )

# /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/balance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å (—á–µ—Ä–µ–∑ WebApp)"
    )
    await message.answer(text)

# /balance ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
@dp.message(Command("balance"))
async def cmd_balance(message: types.Message):
    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç, –Ω–µ WebApp
    await message.answer("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 0.00 USDT (—Ç–µ—Å—Ç–æ–≤—ã–π)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp callback: –ª–æ–≤–∏–º web_app_data
@dp.message(lambda msg: msg.web_app_data is not None)
async def handle_web_app_data(message: types.Message):
    # –î–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ WebApp (JSON string)
    payload = message.web_app_data.data
    try:
        data = json.loads(payload)
    except json.JSONDecodeError:
        return

    action = data.get("action")
    if action == "get_balance":
        # TODO: –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î / blockchain API
        balance = "0.00 USDT (—Ç–µ—Å—Ç–æ–≤—ã–π)"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ WebApp
        await message.answer(balance)
    # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (action == "...")

async def main():
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())